//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MrKupidoServices
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Element))]
    [KnownType(typeof(Ingredient))]
    [KnownType(typeof(Recipe))]
    public partial class Nutrition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int NutritionId
        {
            get { return _nutritionId; }
            set
            {
                if (_nutritionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NutritionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nutritionId = value;
                    OnPropertyChanged("NutritionId");
                }
            }
        }
        private int _nutritionId;
    
        [DataMember]
        public int ElementId
        {
            get { return _elementId; }
            set
            {
                if (_elementId != value)
                {
                    ChangeTracker.RecordOriginalValue("ElementId", _elementId);
                    if (!IsDeserializing)
                    {
                        if (Element != null && Element.ElementId != value)
                        {
                            Element = null;
                        }
                    }
                    _elementId = value;
                    OnPropertyChanged("ElementId");
                }
            }
        }
        private int _elementId;
    
        [DataMember]
        public double Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    OnPropertyChanged("Amount");
                }
            }
        }
        private double _amount;
    
        [DataMember]
        public Nullable<int> RecipeId
        {
            get { return _recipeId; }
            set
            {
                if (_recipeId != value)
                {
                    ChangeTracker.RecordOriginalValue("RecipeId", _recipeId);
                    if (!IsDeserializing)
                    {
                        if (Recipe != null && Recipe.RecipeId != value)
                        {
                            Recipe = null;
                        }
                    }
                    _recipeId = value;
                    OnPropertyChanged("RecipeId");
                }
            }
        }
        private Nullable<int> _recipeId;
    
        [DataMember]
        public Nullable<int> IngredientId
        {
            get { return _ingredientId; }
            set
            {
                if (_ingredientId != value)
                {
                    ChangeTracker.RecordOriginalValue("IngredientId", _ingredientId);
                    if (!IsDeserializing)
                    {
                        if (Ingredient != null && Ingredient.IngredientId != value)
                        {
                            Ingredient = null;
                        }
                    }
                    _ingredientId = value;
                    OnPropertyChanged("IngredientId");
                }
            }
        }
        private Nullable<int> _ingredientId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Element Element
        {
            get { return _element; }
            set
            {
                if (!ReferenceEquals(_element, value))
                {
                    var previousValue = _element;
                    _element = value;
                    FixupElement(previousValue);
                    OnNavigationPropertyChanged("Element");
                }
            }
        }
        private Element _element;
    
        [DataMember]
        public Ingredient Ingredient
        {
            get { return _ingredient; }
            set
            {
                if (!ReferenceEquals(_ingredient, value))
                {
                    var previousValue = _ingredient;
                    _ingredient = value;
                    FixupIngredient(previousValue);
                    OnNavigationPropertyChanged("Ingredient");
                }
            }
        }
        private Ingredient _ingredient;
    
        [DataMember]
        public Recipe Recipe
        {
            get { return _recipe; }
            set
            {
                if (!ReferenceEquals(_recipe, value))
                {
                    var previousValue = _recipe;
                    _recipe = value;
                    FixupRecipe(previousValue);
                    OnNavigationPropertyChanged("Recipe");
                }
            }
        }
        private Recipe _recipe;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Element = null;
            Ingredient = null;
            Recipe = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupElement(Element previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Nutritions.Contains(this))
            {
                previousValue.Nutritions.Remove(this);
            }
    
            if (Element != null)
            {
                if (!Element.Nutritions.Contains(this))
                {
                    Element.Nutritions.Add(this);
                }
    
                ElementId = Element.ElementId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Element")
                    && (ChangeTracker.OriginalValues["Element"] == Element))
                {
                    ChangeTracker.OriginalValues.Remove("Element");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Element", previousValue);
                }
                if (Element != null && !Element.ChangeTracker.ChangeTrackingEnabled)
                {
                    Element.StartTracking();
                }
            }
        }
    
        private void FixupIngredient(Ingredient previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Nutritions.Contains(this))
            {
                previousValue.Nutritions.Remove(this);
            }
    
            if (Ingredient != null)
            {
                if (!Ingredient.Nutritions.Contains(this))
                {
                    Ingredient.Nutritions.Add(this);
                }
    
                IngredientId = Ingredient.IngredientId;
            }
            else if (!skipKeys)
            {
                IngredientId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Ingredient")
                    && (ChangeTracker.OriginalValues["Ingredient"] == Ingredient))
                {
                    ChangeTracker.OriginalValues.Remove("Ingredient");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Ingredient", previousValue);
                }
                if (Ingredient != null && !Ingredient.ChangeTracker.ChangeTrackingEnabled)
                {
                    Ingredient.StartTracking();
                }
            }
        }
    
        private void FixupRecipe(Recipe previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Nutritions.Contains(this))
            {
                previousValue.Nutritions.Remove(this);
            }
    
            if (Recipe != null)
            {
                if (!Recipe.Nutritions.Contains(this))
                {
                    Recipe.Nutritions.Add(this);
                }
    
                RecipeId = Recipe.RecipeId;
            }
            else if (!skipKeys)
            {
                RecipeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Recipe")
                    && (ChangeTracker.OriginalValues["Recipe"] == Recipe))
                {
                    ChangeTracker.OriginalValues.Remove("Recipe");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Recipe", previousValue);
                }
                if (Recipe != null && !Recipe.ChangeTracker.ChangeTrackingEnabled)
                {
                    Recipe.StartTracking();
                }
            }
        }

        #endregion
    }
}
