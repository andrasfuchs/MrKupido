//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MrKupidoServices
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Nutrition))]
    [KnownType(typeof(Rating))]
    [KnownType(typeof(RecipeTag))]
    public partial class Recipe: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RecipeId
        {
            get { return _recipeId; }
            set
            {
                if (_recipeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RecipeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _recipeId = value;
                    OnPropertyChanged("RecipeId");
                }
            }
        }
        private int _recipeId;
    
        [DataMember]
        public string DisplayNameEng
        {
            get { return _displayNameEng; }
            set
            {
                if (_displayNameEng != value)
                {
                    _displayNameEng = value;
                    OnPropertyChanged("DisplayNameEng");
                }
            }
        }
        private string _displayNameEng;
    
        [DataMember]
        public string UniqueNameEng
        {
            get { return _uniqueNameEng; }
            set
            {
                if (_uniqueNameEng != value)
                {
                    _uniqueNameEng = value;
                    OnPropertyChanged("UniqueNameEng");
                }
            }
        }
        private string _uniqueNameEng;
    
        [DataMember]
        public string DisplayNameHun
        {
            get { return _displayNameHun; }
            set
            {
                if (_displayNameHun != value)
                {
                    _displayNameHun = value;
                    OnPropertyChanged("DisplayNameHun");
                }
            }
        }
        private string _displayNameHun;
    
        [DataMember]
        public string UniqueNameHun
        {
            get { return _uniqueNameHun; }
            set
            {
                if (_uniqueNameHun != value)
                {
                    _uniqueNameHun = value;
                    OnPropertyChanged("UniqueNameHun");
                }
            }
        }
        private string _uniqueNameHun;
    
        [DataMember]
        public Nullable<System.TimeSpan> PreparationTime
        {
            get { return _preparationTime; }
            set
            {
                if (_preparationTime != value)
                {
                    _preparationTime = value;
                    OnPropertyChanged("PreparationTime");
                }
            }
        }
        private Nullable<System.TimeSpan> _preparationTime;
    
        [DataMember]
        public Nullable<System.TimeSpan> CookingTime
        {
            get { return _cookingTime; }
            set
            {
                if (_cookingTime != value)
                {
                    _cookingTime = value;
                    OnPropertyChanged("CookingTime");
                }
            }
        }
        private Nullable<System.TimeSpan> _cookingTime;
    
        [DataMember]
        public Nullable<System.TimeSpan> TotalTime
        {
            get { return _totalTime; }
            set
            {
                if (_totalTime != value)
                {
                    _totalTime = value;
                    OnPropertyChanged("TotalTime");
                }
            }
        }
        private Nullable<System.TimeSpan> _totalTime;
    
        [DataMember]
        public Nullable<int> PriceCategory
        {
            get { return _priceCategory; }
            set
            {
                if (_priceCategory != value)
                {
                    _priceCategory = value;
                    OnPropertyChanged("PriceCategory");
                }
            }
        }
        private Nullable<int> _priceCategory;
    
        [DataMember]
        public Nullable<int> SavedCount
        {
            get { return _savedCount; }
            set
            {
                if (_savedCount != value)
                {
                    _savedCount = value;
                    OnPropertyChanged("SavedCount");
                }
            }
        }
        private Nullable<int> _savedCount;
    
        [DataMember]
        public Nullable<int> ForwardedCount
        {
            get { return _forwardedCount; }
            set
            {
                if (_forwardedCount != value)
                {
                    _forwardedCount = value;
                    OnPropertyChanged("ForwardedCount");
                }
            }
        }
        private Nullable<int> _forwardedCount;
    
        [DataMember]
        public string DirectionsFreeTextEng
        {
            get { return _directionsFreeTextEng; }
            set
            {
                if (_directionsFreeTextEng != value)
                {
                    _directionsFreeTextEng = value;
                    OnPropertyChanged("DirectionsFreeTextEng");
                }
            }
        }
        private string _directionsFreeTextEng;
    
        [DataMember]
        public string DirectionsFreeTextHun
        {
            get { return _directionsFreeTextHun; }
            set
            {
                if (_directionsFreeTextHun != value)
                {
                    _directionsFreeTextHun = value;
                    OnPropertyChanged("DirectionsFreeTextHun");
                }
            }
        }
        private string _directionsFreeTextHun;
    
        [DataMember]
        public string FootNotesEng
        {
            get { return _footNotesEng; }
            set
            {
                if (_footNotesEng != value)
                {
                    _footNotesEng = value;
                    OnPropertyChanged("FootNotesEng");
                }
            }
        }
        private string _footNotesEng;
    
        [DataMember]
        public string FootNotesHun
        {
            get { return _footNotesHun; }
            set
            {
                if (_footNotesHun != value)
                {
                    _footNotesHun = value;
                    OnPropertyChanged("FootNotesHun");
                }
            }
        }
        private string _footNotesHun;
    
        [DataMember]
        public string DescriptionEng
        {
            get { return _descriptionEng; }
            set
            {
                if (_descriptionEng != value)
                {
                    _descriptionEng = value;
                    OnPropertyChanged("DescriptionEng");
                }
            }
        }
        private string _descriptionEng;
    
        [DataMember]
        public string DescriptionHun
        {
            get { return _descriptionHun; }
            set
            {
                if (_descriptionHun != value)
                {
                    _descriptionHun = value;
                    OnPropertyChanged("DescriptionHun");
                }
            }
        }
        private string _descriptionHun;
    
        [DataMember]
        public Nullable<int> Servings
        {
            get { return _servings; }
            set
            {
                if (_servings != value)
                {
                    _servings = value;
                    OnPropertyChanged("Servings");
                }
            }
        }
        private Nullable<int> _servings;
    
        [DataMember]
        public Nullable<double> RatingValue
        {
            get { return _ratingValue; }
            set
            {
                if (_ratingValue != value)
                {
                    _ratingValue = value;
                    OnPropertyChanged("RatingValue");
                }
            }
        }
        private Nullable<double> _ratingValue;
    
        [DataMember]
        public Nullable<int> RatingCount
        {
            get { return _ratingCount; }
            set
            {
                if (_ratingCount != value)
                {
                    _ratingCount = value;
                    OnPropertyChanged("RatingCount");
                }
            }
        }
        private Nullable<int> _ratingCount;
    
        [DataMember]
        public Nullable<int> ServingTemperature
        {
            get { return _servingTemperature; }
            set
            {
                if (_servingTemperature != value)
                {
                    _servingTemperature = value;
                    OnPropertyChanged("ServingTemperature");
                }
            }
        }
        private Nullable<int> _servingTemperature;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Nutrition> Nutritions
        {
            get
            {
                if (_nutritions == null)
                {
                    _nutritions = new TrackableCollection<Nutrition>();
                    _nutritions.CollectionChanged += FixupNutritions;
                }
                return _nutritions;
            }
            set
            {
                if (!ReferenceEquals(_nutritions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nutritions != null)
                    {
                        _nutritions.CollectionChanged -= FixupNutritions;
                    }
                    _nutritions = value;
                    if (_nutritions != null)
                    {
                        _nutritions.CollectionChanged += FixupNutritions;
                    }
                    OnNavigationPropertyChanged("Nutritions");
                }
            }
        }
        private TrackableCollection<Nutrition> _nutritions;
    
        [DataMember]
        public TrackableCollection<Rating> Ratings
        {
            get
            {
                if (_ratings == null)
                {
                    _ratings = new TrackableCollection<Rating>();
                    _ratings.CollectionChanged += FixupRatings;
                }
                return _ratings;
            }
            set
            {
                if (!ReferenceEquals(_ratings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ratings != null)
                    {
                        _ratings.CollectionChanged -= FixupRatings;
                    }
                    _ratings = value;
                    if (_ratings != null)
                    {
                        _ratings.CollectionChanged += FixupRatings;
                    }
                    OnNavigationPropertyChanged("Ratings");
                }
            }
        }
        private TrackableCollection<Rating> _ratings;
    
        [DataMember]
        public TrackableCollection<RecipeTag> RecipeTags
        {
            get
            {
                if (_recipeTags == null)
                {
                    _recipeTags = new TrackableCollection<RecipeTag>();
                    _recipeTags.CollectionChanged += FixupRecipeTags;
                }
                return _recipeTags;
            }
            set
            {
                if (!ReferenceEquals(_recipeTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recipeTags != null)
                    {
                        _recipeTags.CollectionChanged -= FixupRecipeTags;
                    }
                    _recipeTags = value;
                    if (_recipeTags != null)
                    {
                        _recipeTags.CollectionChanged += FixupRecipeTags;
                    }
                    OnNavigationPropertyChanged("RecipeTags");
                }
            }
        }
        private TrackableCollection<RecipeTag> _recipeTags;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Nutritions.Clear();
            Ratings.Clear();
            RecipeTags.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupNutritions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Nutrition item in e.NewItems)
                {
                    item.Recipe = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Nutritions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Nutrition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recipe, this))
                    {
                        item.Recipe = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Nutritions", item);
                    }
                }
            }
        }
    
        private void FixupRatings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Rating item in e.NewItems)
                {
                    item.Recipe = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Ratings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rating item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recipe, this))
                    {
                        item.Recipe = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Ratings", item);
                    }
                }
            }
        }
    
        private void FixupRecipeTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RecipeTag item in e.NewItems)
                {
                    item.Recipe = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecipeTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RecipeTag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recipe, this))
                    {
                        item.Recipe = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecipeTags", item);
                    }
                }
            }
        }

        #endregion
    }
}
