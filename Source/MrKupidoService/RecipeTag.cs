//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MrKupidoServices
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Recipe))]
    [KnownType(typeof(Tag))]
    [KnownType(typeof(User))]
    public partial class RecipeTag: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RecipeTagId
        {
            get { return _recipeTagId; }
            set
            {
                if (_recipeTagId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RecipeTagId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _recipeTagId = value;
                    OnPropertyChanged("RecipeTagId");
                }
            }
        }
        private int _recipeTagId;
    
        [DataMember]
        public int RecipeId
        {
            get { return _recipeId; }
            set
            {
                if (_recipeId != value)
                {
                    ChangeTracker.RecordOriginalValue("RecipeId", _recipeId);
                    if (!IsDeserializing)
                    {
                        if (Recipe != null && Recipe.RecipeId != value)
                        {
                            Recipe = null;
                        }
                    }
                    _recipeId = value;
                    OnPropertyChanged("RecipeId");
                }
            }
        }
        private int _recipeId;
    
        [DataMember]
        public int TagId
        {
            get { return _tagId; }
            set
            {
                if (_tagId != value)
                {
                    ChangeTracker.RecordOriginalValue("TagId", _tagId);
                    if (!IsDeserializing)
                    {
                        if (Tag != null && Tag.TagId != value)
                        {
                            Tag = null;
                        }
                    }
                    _tagId = value;
                    OnPropertyChanged("TagId");
                }
            }
        }
        private int _tagId;
    
        [DataMember]
        public Nullable<System.DateTime> TimeAssigned
        {
            get { return _timeAssigned; }
            set
            {
                if (_timeAssigned != value)
                {
                    _timeAssigned = value;
                    OnPropertyChanged("TimeAssigned");
                }
            }
        }
        private Nullable<System.DateTime> _timeAssigned;
    
        [DataMember]
        public Nullable<int> AssignedBy
        {
            get { return _assignedBy; }
            set
            {
                if (_assignedBy != value)
                {
                    ChangeTracker.RecordOriginalValue("AssignedBy", _assignedBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _assignedBy = value;
                    OnPropertyChanged("AssignedBy");
                }
            }
        }
        private Nullable<int> _assignedBy;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Recipe Recipe
        {
            get { return _recipe; }
            set
            {
                if (!ReferenceEquals(_recipe, value))
                {
                    var previousValue = _recipe;
                    _recipe = value;
                    FixupRecipe(previousValue);
                    OnNavigationPropertyChanged("Recipe");
                }
            }
        }
        private Recipe _recipe;
    
        [DataMember]
        public Tag Tag
        {
            get { return _tag; }
            set
            {
                if (!ReferenceEquals(_tag, value))
                {
                    var previousValue = _tag;
                    _tag = value;
                    FixupTag(previousValue);
                    OnNavigationPropertyChanged("Tag");
                }
            }
        }
        private Tag _tag;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Recipe = null;
            Tag = null;
            User = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupRecipe(Recipe previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RecipeTags.Contains(this))
            {
                previousValue.RecipeTags.Remove(this);
            }
    
            if (Recipe != null)
            {
                if (!Recipe.RecipeTags.Contains(this))
                {
                    Recipe.RecipeTags.Add(this);
                }
    
                RecipeId = Recipe.RecipeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Recipe")
                    && (ChangeTracker.OriginalValues["Recipe"] == Recipe))
                {
                    ChangeTracker.OriginalValues.Remove("Recipe");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Recipe", previousValue);
                }
                if (Recipe != null && !Recipe.ChangeTracker.ChangeTrackingEnabled)
                {
                    Recipe.StartTracking();
                }
            }
        }
    
        private void FixupTag(Tag previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RecipeTags.Contains(this))
            {
                previousValue.RecipeTags.Remove(this);
            }
    
            if (Tag != null)
            {
                if (!Tag.RecipeTags.Contains(this))
                {
                    Tag.RecipeTags.Add(this);
                }
    
                TagId = Tag.TagId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tag")
                    && (ChangeTracker.OriginalValues["Tag"] == Tag))
                {
                    ChangeTracker.OriginalValues.Remove("Tag");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tag", previousValue);
                }
                if (Tag != null && !Tag.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tag.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RecipeTags.Contains(this))
            {
                previousValue.RecipeTags.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.RecipeTags.Contains(this))
                {
                    User.RecipeTags.Add(this);
                }
    
                AssignedBy = User.UserId;
            }
            else if (!skipKeys)
            {
                AssignedBy = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }

        #endregion
    }
}
