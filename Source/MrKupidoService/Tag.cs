//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MrKupidoServices
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RecipeTag))]
    public partial class Tag: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TagId
        {
            get { return _tagId; }
            set
            {
                if (_tagId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TagId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tagId = value;
                    OnPropertyChanged("TagId");
                }
            }
        }
        private int _tagId;
    
        [DataMember]
        public string NameEng
        {
            get { return _nameEng; }
            set
            {
                if (_nameEng != value)
                {
                    _nameEng = value;
                    OnPropertyChanged("NameEng");
                }
            }
        }
        private string _nameEng;
    
        [DataMember]
        public string NameHun
        {
            get { return _nameHun; }
            set
            {
                if (_nameHun != value)
                {
                    _nameHun = value;
                    OnPropertyChanged("NameHun");
                }
            }
        }
        private string _nameHun;
    
        [DataMember]
        public string Classname
        {
            get { return _classname; }
            set
            {
                if (_classname != value)
                {
                    _classname = value;
                    OnPropertyChanged("Classname");
                }
            }
        }
        private string _classname;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<RecipeTag> RecipeTags
        {
            get
            {
                if (_recipeTags == null)
                {
                    _recipeTags = new TrackableCollection<RecipeTag>();
                    _recipeTags.CollectionChanged += FixupRecipeTags;
                }
                return _recipeTags;
            }
            set
            {
                if (!ReferenceEquals(_recipeTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recipeTags != null)
                    {
                        _recipeTags.CollectionChanged -= FixupRecipeTags;
                    }
                    _recipeTags = value;
                    if (_recipeTags != null)
                    {
                        _recipeTags.CollectionChanged += FixupRecipeTags;
                    }
                    OnNavigationPropertyChanged("RecipeTags");
                }
            }
        }
        private TrackableCollection<RecipeTag> _recipeTags;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            RecipeTags.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupRecipeTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RecipeTag item in e.NewItems)
                {
                    item.Tag = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecipeTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RecipeTag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tag, this))
                    {
                        item.Tag = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecipeTags", item);
                    }
                }
            }
        }

        #endregion
    }
}
